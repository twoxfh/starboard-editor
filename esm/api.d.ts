export declare type CPointer = number;
export declare type CString = number;
export declare type CInteger = number;
export declare type CInteger64 = bigint;
export declare type CFunctionPointer = number;
export declare type CFloat = number;
export declare type CDouble = number;
export interface SQLiteExports extends WebAssembly.Exports {
    sqlite3_libversion: () => CPointer;
    sqlite3_sourceid: () => CString;
    sqlite3_libversion_number: () => CInteger;
    sqlite3_compileoption_used: (zOptName: CString) => CInteger;
    sqlite3_compileoption_get: (N: CInteger) => CString;
    sqlite3_threadsafe: () => CInteger;
    sqlite3_close: (a: CPointer) => CInteger;
    sqlite3_close_v2: (a: CPointer) => CInteger;
    sqlite3_exec: (a: CPointer, sql: CString, callback: CFunctionPointer, d: CPointer, e: CPointer) => CInteger;
    sqlite3_initialize: () => CInteger;
    sqlite3_shutdown: () => CInteger;
    sqlite3_os_init: () => CInteger;
    sqlite3_os_end: () => CInteger;
    sqlite3_config: (a: CInteger, b: unknown) => CInteger;
    sqlite3_db_config: (a: CPointer, op: CInteger, c: unknown) => CInteger;
    sqlite3_extended_result_codes: (a: CPointer, onoff: CInteger) => CInteger;
    sqlite3_last_insert_rowid: (a: CPointer) => CInteger64;
    sqlite3_set_last_insert_rowid: (a: CPointer, b: CInteger64) => void;
    sqlite3_changes: (a: CPointer) => CInteger;
    sqlite3_changes64: (a: CPointer) => CInteger64;
    sqlite3_total_changes: (a: CPointer) => CInteger;
    sqlite3_total_changes64: (a: CPointer) => CInteger64;
    sqlite3_interrupt: (a: CPointer) => void;
    sqlite3_complete: (sql: CString) => CInteger;
    sqlite3_busy_handler: (a: CPointer, b: CFunctionPointer, c: CPointer) => CInteger;
    sqlite3_busy_timeout: (a: CPointer, ms: CInteger) => CInteger;
    sqlite3_get_table: (db: CPointer, zSql: CString, c: CPointer, pnRow: CPointer, pnColumn: CPointer, f: CPointer) => CInteger;
    sqlite3_free_table: (a: CPointer) => void;
    sqlite3_mprintf: (a: CString, b: unknown) => CPointer;
    sqlite3_vmprintf: (a: CString, b: unknown) => CPointer;
    sqlite3_snprintf: (a: CInteger, b: CPointer, c: CString, d: unknown) => CPointer;
    sqlite3_vsnprintf: (a: CInteger, b: CPointer, c: CString, d: unknown) => CPointer;
    sqlite3_malloc: (a: CInteger) => CPointer;
    sqlite3_malloc64: (a: CInteger64) => CPointer;
    sqlite3_realloc: (a: CPointer, b: CInteger) => CPointer;
    sqlite3_realloc64: (a: CPointer, b: CInteger64) => CPointer;
    sqlite3_free: (a: CPointer) => void;
    sqlite3_msize: (a: CPointer) => CInteger64;
    sqlite3_memory_used: () => CInteger64;
    sqlite3_memory_highwater: (resetFlag: CInteger) => CInteger64;
    sqlite3_randomness: (N: CInteger, P: CPointer) => void;
    sqlite3_set_authorizer: (a: CPointer, xAuth: CFunctionPointer, pUserData: CPointer) => CInteger;
    sqlite3_trace_v2: (a: CPointer, uMask: unknown, xCallback: CFunctionPointer, pCtx: CPointer) => CInteger;
    sqlite3_progress_handler: (a: CPointer, b: CInteger, c: CFunctionPointer, d: CPointer) => void;
    sqlite3_open: (filename: CString, b: CPointer) => CInteger;
    sqlite3_open_v2: (filename: CString, b: CPointer, flags: CInteger, zVfs: CString) => CInteger;
    sqlite3_uri_parameter: (zFilename: CString, zParam: CString) => CString;
    sqlite3_uri_boolean: (zFile: CString, zParam: CString, bDefault: CInteger) => CInteger;
    sqlite3_uri_int64: (a: CString, b: CString, c: CInteger64) => CInteger64;
    sqlite3_uri_key: (zFilename: CString, N: CInteger) => CString;
    sqlite3_filename_database: (a: CString) => CString;
    sqlite3_filename_journal: (a: CString) => CString;
    sqlite3_filename_wal: (a: CString) => CString;
    sqlite3_database_file_object: (a: CString) => CPointer;
    sqlite3_create_filename: (zDatabase: CString, zJournal: CString, zWal: CString, nParam: CInteger, e: CPointer) => CPointer;
    sqlite3_free_filename: (a: CPointer) => void;
    sqlite3_errcode: (db: CPointer) => CInteger;
    sqlite3_extended_errcode: (db: CPointer) => CInteger;
    sqlite3_errmsg: (a: CPointer) => CString;
    sqlite3_errstr: (a: CInteger) => CString;
    sqlite3_limit: (a: CPointer, id: CInteger, newVal: CInteger) => CInteger;
    sqlite3_prepare: (db: CPointer, zSql: CString, nByte: CInteger, d: CPointer, e: CPointer) => CInteger;
    sqlite3_prepare_v2: (db: CPointer, zSql: CString, nByte: CInteger, d: CPointer, e: CPointer) => CInteger;
    sqlite3_prepare_v3: (db: CPointer, zSql: CString, nByte: CInteger, prepFlags: CInteger, e: CPointer, f: CPointer) => CInteger;
    sqlite3_sql: (pStmt: CPointer) => CString;
    sqlite3_expanded_sql: (pStmt: CPointer) => CPointer;
    sqlite3_normalized_sql: (pStmt: CPointer) => CString;
    sqlite3_stmt_readonly: (pStmt: CPointer) => CInteger;
    sqlite3_stmt_isexplain: (pStmt: CPointer) => CInteger;
    sqlite3_stmt_busy: (a: CPointer) => CInteger;
    sqlite3_bind_blob: (a: CPointer, b: CInteger, c: CPointer, n: CInteger, e: CFunctionPointer) => CInteger;
    sqlite3_bind_blob64: (a: CPointer, b: CInteger, c: CPointer, d: CInteger64, e: CFunctionPointer) => CInteger;
    sqlite3_bind_double: (a: CPointer, b: CInteger, c: CDouble) => CInteger;
    sqlite3_bind_int: (a: CPointer, b: CInteger, c: CInteger) => CInteger;
    sqlite3_bind_int64: (a: CPointer, b: CInteger, c: CInteger64) => CInteger;
    sqlite3_bind_null: (a: CPointer, b: CInteger) => CInteger;
    sqlite3_bind_text: (a: CPointer, b: CInteger, c: CString, d: CInteger, e: CFunctionPointer) => CInteger;
    sqlite3_bind_text64: (a: CPointer, b: CInteger, c: CString, d: CInteger64, e: CFunctionPointer, encoding: unknown) => CInteger;
    sqlite3_bind_value: (a: CPointer, b: CInteger, c: CPointer) => CInteger;
    sqlite3_bind_pointer: (a: CPointer, b: CInteger, c: CPointer, d: CString, e: CFunctionPointer) => CInteger;
    sqlite3_bind_zeroblob: (a: CPointer, b: CInteger, n: CInteger) => CInteger;
    sqlite3_bind_zeroblob64: (a: CPointer, b: CInteger, c: CInteger64) => CInteger;
    sqlite3_bind_parameter_count: (a: CPointer) => CInteger;
    sqlite3_bind_parameter_name: (a: CPointer, b: CInteger) => CString;
    sqlite3_bind_parameter_index: (a: CPointer, zName: CString) => CInteger;
    sqlite3_clear_bindings: (a: CPointer) => CInteger;
    sqlite3_column_count: (pStmt: CPointer) => CInteger;
    sqlite3_column_name: (a: CPointer, N: CInteger) => CString;
    sqlite3_column_database_name: (a: CPointer, b: CInteger) => CString;
    sqlite3_column_table_name: (a: CPointer, b: CInteger) => CString;
    sqlite3_column_origin_name: (a: CPointer, b: CInteger) => CString;
    sqlite3_column_decltype: (a: CPointer, b: CInteger) => CString;
    sqlite3_step: (a: CPointer) => CInteger;
    sqlite3_data_count: (pStmt: CPointer) => CInteger;
    sqlite3_column_blob: (a: CPointer, iCol: CInteger) => CPointer;
    sqlite3_column_double: (a: CPointer, iCol: CInteger) => CDouble;
    sqlite3_column_int: (a: CPointer, iCol: CInteger) => CInteger;
    sqlite3_column_int64: (a: CPointer, iCol: CInteger) => CInteger64;
    sqlite3_column_text: (a: CPointer, iCol: CInteger) => CPointer;
    sqlite3_column_value: (a: CPointer, iCol: CInteger) => CPointer;
    sqlite3_column_bytes: (a: CPointer, iCol: CInteger) => CInteger;
    sqlite3_column_type: (a: CPointer, iCol: CInteger) => CInteger;
    sqlite3_finalize: (pStmt: CPointer) => CInteger;
    sqlite3_reset: (pStmt: CPointer) => CInteger;
    sqlite3_create_function: (db: CPointer, zFunctionName: CString, nArg: CInteger, eTextRep: CInteger, pApp: CPointer, xFunc: CFunctionPointer, xStep: CFunctionPointer, xFinal: CFunctionPointer) => CInteger;
    sqlite3_create_function_v2: (db: CPointer, zFunctionName: CString, nArg: CInteger, eTextRep: CInteger, pApp: CPointer, xFunc: CFunctionPointer, xStep: CFunctionPointer, xFinal: CFunctionPointer, xDestroy: CFunctionPointer) => CInteger;
    sqlite3_create_window_function: (db: CPointer, zFunctionName: CString, nArg: CInteger, eTextRep: CInteger, pApp: CPointer, xStep: CFunctionPointer, xFinal: CFunctionPointer, xValue: CFunctionPointer, xInverse: CFunctionPointer, xDestroy: CFunctionPointer) => CInteger;
    sqlite3_value_blob: (a: CPointer) => CPointer;
    sqlite3_value_double: (a: CPointer) => CDouble;
    sqlite3_value_int: (a: CPointer) => CInteger;
    sqlite3_value_int64: (a: CPointer) => CInteger64;
    sqlite3_value_pointer: (a: CPointer, b: CString) => CPointer;
    sqlite3_value_text: (a: CPointer) => CPointer;
    sqlite3_value_bytes: (a: CPointer) => CInteger;
    sqlite3_value_type: (a: CPointer) => CInteger;
    sqlite3_value_numeric_type: (a: CPointer) => CInteger;
    sqlite3_value_nochange: (a: CPointer) => CInteger;
    sqlite3_value_frombind: (a: CPointer) => CInteger;
    sqlite3_value_subtype: (a: CPointer) => CInteger;
    sqlite3_value_dup: (a: CPointer) => CPointer;
    sqlite3_value_free: (a: CPointer) => void;
    sqlite3_aggregate_context: (a: CPointer, nBytes: CInteger) => CPointer;
    sqlite3_user_data: (a: CPointer) => CPointer;
    sqlite3_context_db_handle: (a: CPointer) => CPointer;
    sqlite3_get_auxdata: (a: CPointer, N: CInteger) => CPointer;
    sqlite3_set_auxdata: (a: CPointer, N: CInteger, c: CPointer, d: CFunctionPointer) => void;
    sqlite3_result_blob: (a: CPointer, b: CPointer, c: CInteger, d: CFunctionPointer) => void;
    sqlite3_result_blob64: (a: CPointer, b: CPointer, c: CInteger64, d: CFunctionPointer) => void;
    sqlite3_result_double: (a: CPointer, b: CDouble) => void;
    sqlite3_result_error: (a: CPointer, b: CString, c: CInteger) => void;
    sqlite3_result_error_toobig: (a: CPointer) => void;
    sqlite3_result_error_nomem: (a: CPointer) => void;
    sqlite3_result_error_code: (a: CPointer, b: CInteger) => void;
    sqlite3_result_int: (a: CPointer, b: CInteger) => void;
    sqlite3_result_int64: (a: CPointer, b: CInteger64) => void;
    sqlite3_result_null: (a: CPointer) => void;
    sqlite3_result_text: (a: CPointer, b: CString, c: CInteger, d: CFunctionPointer) => void;
    sqlite3_result_text64: (a: CPointer, b: CString, c: CInteger64, d: CFunctionPointer, encoding: unknown) => void;
    sqlite3_result_value: (a: CPointer, b: CPointer) => void;
    sqlite3_result_pointer: (a: CPointer, b: CPointer, c: CString, d: CFunctionPointer) => void;
    sqlite3_result_zeroblob: (a: CPointer, n: CInteger) => void;
    sqlite3_result_zeroblob64: (a: CPointer, n: CInteger64) => CInteger;
    sqlite3_result_subtype: (a: CPointer, int: CInteger) => void;
    sqlite3_create_collation: (a: CPointer, zName: CString, eTextRep: CInteger, pArg: CPointer, xCompare: CFunctionPointer) => CInteger;
    sqlite3_create_collation_v2: (a: CPointer, zName: CString, eTextRep: CInteger, pArg: CPointer, xCompare: CFunctionPointer, xDestroy: CFunctionPointer) => CInteger;
    sqlite3_collation_needed: (a: CPointer, b: CPointer, c: CFunctionPointer) => CInteger;
    sqlite3_activate_cerod: (zPassPhrase: CString) => void;
    sqlite3_sleep: (a: CInteger) => CInteger;
    sqlite3_win32_set_directory: (type: unknown, zValue: CPointer) => CPointer;
    sqlite3_win32_set_directory8: (type: unknown, zValue: CString) => CInteger;
    sqlite3_get_autocommit: (a: CPointer) => CInteger;
    sqlite3_db_handle: (a: CPointer) => CPointer;
    sqlite3_db_filename: (db: CPointer, zDbName: CString) => CString;
    sqlite3_db_readonly: (db: CPointer, zDbName: CString) => CInteger;
    sqlite3_txn_state: (a: CPointer, zSchema: CString) => CInteger;
    sqlite3_next_stmt: (pDb: CPointer, pStmt: CPointer) => CPointer;
    sqlite3_commit_hook: (a: CPointer, b: CFunctionPointer, c: CPointer) => CPointer;
    sqlite3_rollback_hook: (a: CPointer, b: CFunctionPointer, c: CPointer) => CPointer;
    sqlite3_autovacuum_pages: (db: CPointer, b: CFunctionPointer, c: CPointer, d: CFunctionPointer) => CInteger;
    sqlite3_update_hook: (a: CPointer, b: CFunctionPointer, c: CPointer) => CPointer;
    sqlite3_enable_shared_cache: (a: CInteger) => CInteger;
    sqlite3_release_memory: (a: CInteger) => CInteger;
    sqlite3_db_release_memory: (a: CPointer) => CInteger;
    sqlite3_soft_heap_limit64: (N: CInteger64) => CInteger64;
    sqlite3_hard_heap_limit64: (N: CInteger64) => CInteger64;
    sqlite3_table_column_metadata: (db: CPointer, zDbName: CString, zTableName: CString, zColumnName: CString, e: CPointer, f: CPointer, pNotNull: CPointer, pPrimaryKey: CPointer, pAutoinc: CPointer) => CInteger;
    sqlite3_load_extension: (db: CPointer, zFile: CString, zProc: CString, d: CPointer) => CInteger;
    sqlite3_enable_load_extension: (db: CPointer, onoff: CInteger) => CInteger;
    sqlite3_auto_extension: (xEntryPoint: CFunctionPointer) => CInteger;
    sqlite3_cancel_auto_extension: (xEntryPoint: CFunctionPointer) => CInteger;
    sqlite3_reset_auto_extension: () => void;
    sqlite3_create_module: (db: CPointer, zName: CString, p: CPointer, pClientData: CPointer) => CInteger;
    sqlite3_create_module_v2: (db: CPointer, zName: CString, p: CPointer, pClientData: CPointer, xDestroy: CFunctionPointer) => CInteger;
    sqlite3_drop_modules: (db: CPointer, b: CPointer) => CInteger;
    sqlite3_declare_vtab: (a: CPointer, zSQL: CString) => CInteger;
    sqlite3_overload_function: (a: CPointer, zFuncName: CString, nArg: CInteger) => CInteger;
    sqlite3_blob_open: (a: CPointer, zDb: CString, zTable: CString, zColumn: CString, iRow: CInteger64, flags: CInteger, g: CPointer) => CInteger;
    sqlite3_blob_reopen: (a: CPointer, b: CInteger64) => CInteger;
    sqlite3_blob_close: (a: CPointer) => CInteger;
    sqlite3_blob_bytes: (a: CPointer) => CInteger;
    sqlite3_blob_read: (a: CPointer, Z: CPointer, N: CInteger, iOffset: CInteger) => CInteger;
    sqlite3_blob_write: (a: CPointer, z: CPointer, n: CInteger, iOffset: CInteger) => CInteger;
    sqlite3_vfs_find: (zVfsName: CString) => CPointer;
    sqlite3_vfs_register: (a: CPointer, makeDflt: CInteger) => CInteger;
    sqlite3_vfs_unregister: (a: CPointer) => CInteger;
    sqlite3_mutex_alloc: (a: CInteger) => CPointer;
    sqlite3_mutex_free: (a: CPointer) => void;
    sqlite3_mutex_enter: (a: CPointer) => void;
    sqlite3_mutex_try: (a: CPointer) => CInteger;
    sqlite3_mutex_leave: (a: CPointer) => void;
    sqlite3_mutex_held: (a: CPointer) => CInteger;
    sqlite3_mutex_notheld: (a: CPointer) => CInteger;
    sqlite3_db_mutex: (a: CPointer) => CPointer;
    sqlite3_file_control: (a: CPointer, zDbName: CString, op: CInteger, d: CPointer) => CInteger;
    sqlite3_test_control: (op: CInteger, b: unknown) => CInteger;
    sqlite3_keyword_count: () => CInteger;
    sqlite3_keyword_name: (a: CInteger, b: CPointer, c: CPointer) => CInteger;
    sqlite3_keyword_check: (a: CString, b: CInteger) => CInteger;
    sqlite3_str_new: (a: CPointer) => CPointer;
    sqlite3_str_finish: (a: CPointer) => CPointer;
    sqlite3_str_appendf: (a: CPointer, zFormat: CString, c: unknown) => void;
    sqlite3_str_vappendf: (a: CPointer, zFormat: CString, c: unknown) => void;
    sqlite3_str_append: (a: CPointer, zIn: CString, N: CInteger) => void;
    sqlite3_str_appendall: (a: CPointer, zIn: CString) => void;
    sqlite3_str_appendchar: (a: CPointer, N: CInteger, C: unknown) => void;
    sqlite3_str_reset: (a: CPointer) => void;
    sqlite3_str_errcode: (a: CPointer) => CInteger;
    sqlite3_str_length: (a: CPointer) => CInteger;
    sqlite3_str_value: (a: CPointer) => CPointer;
    sqlite3_status: (op: CInteger, pCurrent: CPointer, pHighwater: CPointer, resetFlag: CInteger) => CInteger;
    sqlite3_status64: (op: CInteger, pCurrent: CPointer, pHighwater: CPointer, resetFlag: CInteger) => CInteger;
    sqlite3_db_status: (a: CPointer, op: CInteger, pCur: CPointer, pHiwtr: CPointer, resetFlg: CInteger) => CInteger;
    sqlite3_stmt_status: (a: CPointer, op: CInteger, resetFlg: CInteger) => CInteger;
    sqlite3_backup_init: (pDest: CPointer, zDestName: CString, pSource: CPointer, zSourceName: CString) => CPointer;
    sqlite3_backup_step: (p: CPointer, nPage: CInteger) => CInteger;
    sqlite3_backup_finish: (p: CPointer) => CInteger;
    sqlite3_backup_remaining: (p: CPointer) => CInteger;
    sqlite3_backup_pagecount: (p: CPointer) => CInteger;
    sqlite3_unlock_notify: (pBlocked: CPointer, xNotify: CFunctionPointer, pNotifyArg: CPointer) => CInteger;
    sqlite3_stricmp: (a: CString, b: CString) => CInteger;
    sqlite3_strnicmp: (a: CString, b: CString, c: CInteger) => CInteger;
    sqlite3_strglob: (zGlob: CString, zStr: CString) => CInteger;
    sqlite3_strlike: (zGlob: CString, zStr: CString, cEsc: CInteger) => CInteger;
    sqlite3_log: (iErrCode: CInteger, zFormat: CString, c: unknown) => void;
    sqlite3_wal_hook: (a: CPointer, b: CFunctionPointer, c: CPointer) => CPointer;
    sqlite3_wal_autocheckpoint: (db: CPointer, N: CInteger) => CInteger;
    sqlite3_wal_checkpoint: (db: CPointer, zDb: CString) => CInteger;
    sqlite3_wal_checkpoint_v2: (db: CPointer, zDb: CString, eMode: CInteger, pnLog: CPointer, pnCkpt: CPointer) => CInteger;
    sqlite3_vtab_config: (a: CPointer, op: CInteger, c: unknown) => CInteger;
    sqlite3_vtab_on_conflict: (a: CPointer) => CInteger;
    sqlite3_vtab_nochange: (a: CPointer) => CInteger;
    sqlite3_vtab_collation: (a: CPointer, b: CInteger) => CPointer;
    sqlite3_stmt_scanstatus: (pStmt: CPointer, idx: CInteger, iScanStatusOp: CInteger, pOut: CPointer) => CInteger;
    sqlite3_stmt_scanstatus_reset: (a: CPointer) => void;
    sqlite3_db_cacheflush: (a: CPointer) => CInteger;
    sqlite3_preupdate_hook: (db: CPointer, xPreUpdate: CFunctionPointer, c: CPointer) => CPointer;
    sqlite3_preupdate_old: (a: CPointer, b: CInteger, c: CPointer) => CInteger;
    sqlite3_preupdate_count: (a: CPointer) => CInteger;
    sqlite3_preupdate_depth: (a: CPointer) => CInteger;
    sqlite3_preupdate_new: (a: CPointer, b: CInteger, c: CPointer) => CInteger;
    sqlite3_preupdate_blobwrite: (a: CPointer) => CInteger;
    sqlite3_system_errno: (a: CPointer) => CInteger;
    sqlite3_snapshot_get: (db: CPointer, zSchema: CString, c: CPointer) => CInteger;
    sqlite3_snapshot_open: (db: CPointer, zSchema: CString, pSnapshot: CPointer) => CInteger;
    sqlite3_snapshot_free: (a: CPointer) => unknown;
    sqlite3_snapshot_cmp: (p1: CPointer, p2: CPointer) => CInteger;
    sqlite3_snapshot_recover: (db: CPointer, zDb: CString) => CInteger;
    sqlite3_serialize: (db: CPointer, zSchema: CString, piSize: CPointer, mFlags: CInteger) => CPointer;
    sqlite3_deserialize: (db: CPointer, zSchema: CString, pData: CPointer, szDb: CInteger64, szBuf: CInteger64, mFlags: unknown) => CInteger;
    sqlite3_rtree_geometry_callback: (db: CPointer, zGeom: CString, xGeom: CFunctionPointer, pContext: CPointer) => CInteger;
    sqlite3_rtree_query_callback: (db: CPointer, zQueryFunc: CString, xQueryFunc: CFunctionPointer, pContext: CPointer, xDestructor: CFunctionPointer) => CInteger;
    sqlite3session_create: (db: CPointer, zDb: CString, c: CPointer) => CInteger;
    sqlite3session_delete: (pSession: CPointer) => void;
    sqlite3session_object_config: (a: CPointer, op: CInteger, pArg: CPointer) => CInteger;
    sqlite3session_enable: (pSession: CPointer, bEnable: CInteger) => CInteger;
    sqlite3session_indirect: (pSession: CPointer, bIndirect: CInteger) => CInteger;
    sqlite3session_attach: (pSession: CPointer, zTab: CString) => CInteger;
    sqlite3session_table_filter: (pSession: CPointer, xFilter: CFunctionPointer, pCtx: CPointer) => void;
    sqlite3session_changeset: (pSession: CPointer, pnChangeset: CPointer, c: CPointer) => CInteger;
    sqlite3session_changeset_size: (pSession: CPointer) => CInteger64;
    sqlite3session_diff: (pSession: CPointer, zFromDb: CString, zTbl: CString, d: CPointer) => CInteger;
    sqlite3session_patchset: (pSession: CPointer, pnPatchset: CPointer, c: CPointer) => CInteger;
    sqlite3session_isempty: (pSession: CPointer) => CInteger;
    sqlite3session_memory_used: (pSession: CPointer) => CInteger64;
    sqlite3changeset_start: (a: CPointer, nChangeset: CInteger, pChangeset: CPointer) => CInteger;
    sqlite3changeset_start_v2: (a: CPointer, nChangeset: CInteger, pChangeset: CPointer, flags: CInteger) => CInteger;
    sqlite3changeset_next: (pIter: CPointer) => CInteger;
    sqlite3changeset_op: (pIter: CPointer, b: CPointer, pnCol: CPointer, pOp: CPointer, pbIndirect: CPointer) => CInteger;
    sqlite3changeset_pk: (pIter: CPointer, b: CPointer, pnCol: CPointer) => CInteger;
    sqlite3changeset_old: (pIter: CPointer, iVal: CInteger, c: CPointer) => CInteger;
    sqlite3changeset_new: (pIter: CPointer, iVal: CInteger, c: CPointer) => CInteger;
    sqlite3changeset_conflict: (pIter: CPointer, iVal: CInteger, c: CPointer) => CInteger;
    sqlite3changeset_fk_conflicts: (pIter: CPointer, pnOut: CPointer) => CInteger;
    sqlite3changeset_finalize: (pIter: CPointer) => CInteger;
    sqlite3changeset_invert: (nIn: CInteger, pIn: CPointer, pnOut: CPointer, d: CPointer) => CInteger;
    sqlite3changeset_concat: (nA: CInteger, pA: CPointer, nB: CInteger, pB: CPointer, pnOut: CPointer, f: CPointer) => CInteger;
    sqlite3changegroup_new: (a: CPointer) => CInteger;
    sqlite3changegroup_add: (a: CPointer, nData: CInteger, pData: CPointer) => CInteger;
    sqlite3changegroup_output: (a: CPointer, pnData: CPointer, c: CPointer) => CInteger;
    sqlite3changegroup_delete: (a: CPointer) => void;
    sqlite3changeset_apply: (db: CPointer, nChangeset: CInteger, pChangeset: CPointer, xFilter: CFunctionPointer, xConflict: CFunctionPointer, pCtx: CPointer) => CInteger;
    sqlite3changeset_apply_v2: (db: CPointer, nChangeset: CInteger, pChangeset: CPointer, xFilter: CFunctionPointer, xConflict: CFunctionPointer, pCtx: CPointer, g: CPointer, pnRebase: CPointer, flags: CInteger) => CInteger;
    sqlite3rebaser_create: (a: CPointer) => CInteger;
    sqlite3rebaser_configure: (a: CPointer, nRebase: CInteger, pRebase: CPointer) => CInteger;
    sqlite3rebaser_rebase: (a: CPointer, nIn: CInteger, pIn: CPointer, pnOut: CPointer, e: CPointer) => CInteger;
    sqlite3rebaser_delete: (p: CPointer) => void;
    sqlite3changeset_apply_strm: (db: CPointer, xInput: CFunctionPointer, pIn: CPointer, xFilter: CFunctionPointer, xConflict: CFunctionPointer, pCtx: CPointer) => CInteger;
    sqlite3changeset_apply_v2_strm: (db: CPointer, xInput: CFunctionPointer, pIn: CPointer, xFilter: CFunctionPointer, xConflict: CFunctionPointer, pCtx: CPointer, g: CPointer, pnRebase: CPointer, flags: CInteger) => CInteger;
    sqlite3changeset_concat_strm: (xInputA: CFunctionPointer, pInA: CPointer, xInputB: CFunctionPointer, pInB: CPointer, xOutput: CFunctionPointer, pOut: CPointer) => CInteger;
    sqlite3changeset_invert_strm: (xInput: CFunctionPointer, pIn: CPointer, xOutput: CFunctionPointer, pOut: CPointer) => CInteger;
    sqlite3changeset_start_strm: (a: CPointer, xInput: CFunctionPointer, pIn: CPointer) => CInteger;
    sqlite3changeset_start_v2_strm: (a: CPointer, xInput: CFunctionPointer, pIn: CPointer, flags: CInteger) => CInteger;
    sqlite3session_changeset_strm: (pSession: CPointer, xOutput: CFunctionPointer, pOut: CPointer) => CInteger;
    sqlite3session_patchset_strm: (pSession: CPointer, xOutput: CFunctionPointer, pOut: CPointer) => CInteger;
    sqlite3changegroup_add_strm: (a: CPointer, xInput: CFunctionPointer, pIn: CPointer) => CInteger;
    sqlite3changegroup_output_strm: (a: CPointer, xOutput: CFunctionPointer, pOut: CPointer) => CInteger;
    sqlite3rebaser_rebase_strm: (pRebaser: CPointer, xInput: CFunctionPointer, pIn: CPointer, xOutput: CFunctionPointer, pOut: CPointer) => CInteger;
    sqlite3session_config: (op: CInteger, pArg: CPointer) => CInteger;
    sqlite3_ext_vfs_register: (name: CString, makeDflt: CInteger, pOutVfsId: CPointer) => CInteger;
    sqlite3_ext_vfs_unregister: (vfsId: CInteger) => CInteger;
    sqlite3_ext_exec: (db: CPointer, sql: CString, id: CInteger, d: CPointer) => CInteger;
    memory: WebAssembly.Memory;
}
export interface SQLiteImports {
    sqlite3_ext_os_init: () => CInteger;
    sqlite3_ext_os_end: () => CInteger;
    sqlite3_ext_exec_callback: (id: CInteger, nCols: CInteger, azCols: CPointer, azColNames: CPointer) => CInteger;
    sqlite3_ext_io_close: (vfsId: CInteger, fileId: CInteger) => CInteger;
    sqlite3_ext_io_read: (vfsId: CInteger, fileId: CInteger, pBuf: CPointer, iAmt: CInteger, iOfst: CInteger) => CInteger;
    sqlite3_ext_io_write: (vfsId: CInteger, fileId: CInteger, pBuf: CPointer, iAmt: CInteger, iOfst: CInteger) => CInteger;
    sqlite3_ext_io_truncate: (vfsId: CInteger, fileId: CInteger, size: CInteger) => CInteger;
    sqlite3_ext_io_sync: (vfsId: CInteger, fileId: CInteger, flags: CInteger) => CInteger;
    sqlite3_ext_io_file_size: (vfsId: CInteger, fileId: CInteger, pSize: CPointer) => CInteger;
    sqlite3_ext_io_lock: (vfsId: CInteger, fileId: CInteger, locktype: CInteger) => CInteger;
    sqlite3_ext_io_unlock: (vfsId: CInteger, fileId: CInteger, locktype: CInteger) => CInteger;
    sqlite3_ext_io_check_reserved_lock: (vfsId: CInteger, fileId: CInteger, pResOut: CPointer) => CInteger;
    sqlite3_ext_io_file_control: (vfsId: CInteger, fileId: CInteger, op: CInteger, pArg: CPointer) => CInteger;
    sqlite3_ext_io_sector_size: (vfsId: CInteger, fileId: CInteger) => CInteger;
    sqlite3_ext_io_device_characteristics: (vfsId: CInteger, fileId: CInteger) => CInteger;
    sqlite3_ext_vfs_open: (id: CInteger, zName: CString, pOutfileId: CPointer, flags: CInteger, pOutFlags: CPointer) => CInteger;
    sqlite3_ext_vfs_delete: (id: CInteger, zName: CString, syncDir: CInteger) => CInteger;
    sqlite3_ext_vfs_access: (id: CInteger, zName: CString, flags: CInteger, pResOut: CPointer) => CInteger;
    sqlite3_ext_vfs_full_pathname: (id: CInteger, zName: CString, nOut: CInteger, zOut: CPointer) => CInteger;
    sqlite3_ext_vfs_randomness: (id: CInteger, nByte: CInteger, zOut: CPointer) => CInteger;
    sqlite3_ext_vfs_sleep: (id: CInteger, microseconds: CInteger) => CInteger;
    sqlite3_ext_vfs_current_time: (id: CInteger, pTimeOut: CPointer) => CInteger;
    sqlite3_ext_vfs_get_last_error: (id: CInteger, nByte: CInteger, zOut: CPointer) => CInteger;
}
export declare class SQLiteUnimplementedImportError extends Error {
    constructor(api: string);
}
export declare const unimplementedImports: SQLiteImports;
